onyxia:
  ingress:
    enabled: true
    ingressClassName: "nginx"
    annotations:
      kubernetes.io/ingress.class: nginx
    hosts:
      - host: onyxia.localhost
  web:
    # The full list of configuration option for the web component is available here: 
    # https://github.com/InseeFrLab/onyxia/blob/main/web/.env
    env:
      #GLOBAL_ALERT: |
      #  {
      #    severity: "success",
      #    message: {
      #      en: "A **big** announcement! [Check it out](https://example.com)!",
      #      fr: "Une annonce **importante**! [Regardez](https://example.com)!"
      #    }
      #  }

      CUSTOM_RESOURCES: "https://www.sspcloud.fr/onyxia-sspcloud-resources.zip"
      # The terms of services referenced are in the zip file above.  
      # You can use your own terms of services by supplying your own zip file.
      # More information here: https://docs.onyxia.sh/admin-doc/theme  
      TERMS_OF_SERVICES: |
        { 
          en: "%PUBLIC_URL%/custom-resources/tos_en.md", 
          fr: "%PUBLIC_URL%/custom-resources/tos_fr.md"
        }
  api:
    serviceAccount:
      create: true
      clusterAdmin: true
    # The full list of configuration option for the api component is available here:
    # https://github.com/InseeFrLab/onyxia-api?tab=readme-ov-file#configuration
    env:
      #security.cors.allowed_origins: "*"
      authentication.mode: "openidconnect"
      oidc.issuer-uri: "https://auth.localhost/auth/realms/datalab"
      oidc.clientID: "onyxia"
      #oidc.audience: "onyxia"
      #oidc.extra-query-params: "kc_idp_hint=google&foo=bar"
      #springdoc.swagger-ui.oauth.clientId: onyxia
    
    # The region configuration is available here: 
    # https://github.com/InseeFrLab/onyxia-api/blob/main/docs/region-configuration.md
    regions: [
      {
        id: "my-region",
        name: "My Region",
        description: "Region hosted on my-cluster",
        services: {
          type: "KUBERNETES",
          singleNamespace: false,
          authenticationMode: "serviceAccount",
          expose: {
            domain: "localhost"
          },
          #namespacePrefix:"user-",
          #usernamePrefix:"oidc-",
          #groupNamespacePrefix:"project-",
          #groupPrefix:"oidc-",
        }
      }
    ]

    # add configmap with zscaler certs as volume to api pod
    extraVolumes:
      - name: zscaler-certs
        configMap:
          name: zscaler-certs

    # mount the zscaler certs volume to relevant locations in api container
    extraVolumeMounts:
      - name: zscaler-certs
        mountPath: /usr/local/share/ca-certificates
      - name: zscaler-certs
        subPath: zscaler_root_ca.crt
        mountPath: /etc/ssl/certs/zscaler_root_ca.crt
      - name: zscaler-certs
        subPath: zscaler_intermediate_root_ca.crt
        mountPath: /etc/ssl/certs/zscaler_intermediate_root_ca.crt
